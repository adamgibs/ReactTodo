import moment from 'moment';

import firebase, {firebaseRef} from 'app/firebase/';

export var setSearchText = (searchText) => {
  return {
    type: 'SET_SEARCH_TEXT',
    searchText
  };
};

export var toggleShowCompleted = () => {
  return {
    type: 'TOGGLE_SHOW_COMPLETED'
  };
};

export var addTodo = (todo) => {
  return {
    type: 'ADD_TODO',
    todo
  };
};



export var startAddTodo = (text) => {
  return (dispatch, getState) => {
    var todo = {
        text,
        completed: false,
        createdAt: moment().unix(),
        completedAt: null //as opposed to undefined because that's how you remove data in firebase
    };

    var todoRef = firebaseRef.child('todos').push(todo); //creates var for firebase reference and then pushes new todo to datbase

    return todoRef.then(() => { //after pushing to database we dispatch the newly created todo to the reducer by passing it to addTodo.
      dispatch(addTodo({
        ...todo, // We add the todo
        id: todoRef.key // And set the id to the key that is generated by Firebase
      }));
    });
  };
};

export var addTodos = (todos) => {
  return {
    type: 'ADD_TODOS',
    todos
  }
};

export var startAddTodos = () => {
  return(dispatch, getState) => {
    var todosRef = firebaseRef.child('todos');
    return todosRef.once('value').then((snapshot) => { //putting all the logic in the async promise.
      var todos = [];
      var keyArray = Object.keys(snapshot.val());
      keyArray.forEach((key) => {
        todos.push(snapshot.val()[key]);
      });

      for(var i = 0; i < keyArray.length; i++){
        todos[i].id = keyArray[i];
      };
      dispatch(addTodos(todos));
    }, (e) => {
      console.log('Unable to fetch data');
    });

  };
};

export var updateTodo = (id, updates) => {
  return {
    type: 'UPDATE_TODO',
    id,
    updates
  };
};

export var startToggleTodo = (id, completed) => {
  return(dispatch, getState) => {
    var todoRef = firebaseRef.child('todos/' + id)
    var updates = {
      completed,
      completedAt: completed ? moment().unix(): null
    };

    return todoRef.update(updates).then(() => {
      dispatch(updateTodo(id, updates));
    });
  };
};
